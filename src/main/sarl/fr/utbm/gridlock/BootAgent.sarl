/** 
 * 
 */
package fr.utbm.gridlock

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import fr.utbm.gridlock.environment.EnvironmentAgent
import io.sarl.core.Schedules
import io.sarl.core.DefaultContextInteractions

/** 
 * Initialize the simulation
 * 
 * @author Alexandre Lombard
 * 
 */
agent BootAgent {
	uses DefaultContextInteractions, Logging, Lifecycle, Schedules

	on Initialize {
		info("Initializing simulation...")
		
		val environmentId = typeof(EnvironmentAgent).spawn
		
		// Regularly the simulation step event will be sent to the environment agent
		every(1000)[new SimulationStep().emit [it == environmentId]]
	}
}
