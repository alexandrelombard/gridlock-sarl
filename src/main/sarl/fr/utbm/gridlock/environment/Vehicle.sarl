/** 
 * 
 */
package fr.utbm.gridlock.environment

import fr.utbm.gridlock.environment.network.RoadSegment
import fr.utbm.gridlock.utils.Vector3

/** 
 * The body of a vehicle
 * @author Alexandre Lombard
 * 
 */
class Vehicle extends Object {
	
	public val wheelbase = 4
	
	/** The current position of the vehicle */
	public var position : Vector3
	/** The current forward velocity of the vehicle */
	public var velocity = 0.0
	/** The current angle of the direction of the vehicle (the yaw)*/
	public var angle = 0.0

	/** The current road segment of the vehicle */
	public var segment : RoadSegment
	
	new (position: Vector3, angle: Double = 0.0, velocity: Double = 0.0) {
		this.position = position
		this.velocity = velocity
		this.angle = angle
	}
	
	/**
	 * Applying the given acceleration and the given steering wheel angle for the given amount of time,
	 * we compute the new position of the vehicle
	 * @param acceleration the acceleration to apply in m.s^-2
	 * @param deltaTime the duration of the application of this acceleration
	 */
	def move(acceleration: Double, steeringWheelAngle: Double, deltaTime: Double) {
		// We compute the traveled distance for the given deltaTime
		val traveledDistance = this.velocity * deltaTime + 0.5 * acceleration * Math.pow(deltaTime, 2) 
		
		// We update the position and angle (direction) assuming that the steering wheel angle
		// is applied instantaneously
		// TODO
		this.position = new Vector3()
		
		// We update the velocity
		this.velocity += acceleration * deltaTime 
	}
	
}
