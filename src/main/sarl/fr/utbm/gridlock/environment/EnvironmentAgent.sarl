/** 
 * 
 */
package fr.utbm.gridlock.environment

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import fr.utbm.gridlock.environment.factories.impl.SimpleIntersectionFactory
import java.util.UUID
import fr.utbm.gridlock.driver.DriverAgent
import io.sarl.core.Lifecycle
import io.sarl.core.AgentKilled
import fr.utbm.gridlock.environment.network.RoadNetwork
import fr.utbm.gridlock.SimulationStep
import fr.utbm.gridlock.utils.Vector3

/** 
 * The environment agent, in charge of initializing the road network, then updating the positions of the vehicles on the road network
 * @author Alexandre Lombard
 * 
 */
agent EnvironmentAgent {
	
	uses Logging, Schedules, Lifecycle
	
	/** The road network of the environment */
	val roadNetwork = new RoadNetwork()
	
	/** The vehicles currently in the environment */
	val vehicles = <UUID, Vehicle>newHashMap
	
	private def buildRoadNetwork() {
		// Note: change the implementation of the factory to generate another road network
		val roadNetworkFactory = new SimpleIntersectionFactory()
		
		// Generate the road network
		roadNetworkFactory.generateRoadNetwork(this.roadNetwork)
	}

	on Initialize {
		info("Building road network...")
		
		buildRoadNetwork()
		
		info("Scheduling vehicle spawn...")
		
		every(1000.milliseconds)[
			info("Spawning a new vehicle...")
			
			// Spawn a vehicle
			val vehicle = new Vehicle(new Vector3())
			val driverId = typeof(DriverAgent).spawn
			
			vehicles.put(driverId, vehicle)
		]
	}
	
	on AgentKilled {
		synchronized (this.vehicles) {
			// Delete the vehicle of the agent who died
			val vehicle = this.vehicles.get(occurrence.source.UUID)

			if (vehicle !== null) {
				if (vehicle.segment !== null) {
					vehicle.segment.vehicles.remove(vehicle)
				}

				this.vehicles.remove(vehicle)
			}			
		}
	}
	
	on SimulationStep {
		// Apply pending vehicles actions
		
		// Compute vehicles perceptions
	}
}
