/** 
 * 
 */
package fr.utbm.gridlock.environment

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import fr.utbm.gridlock.environment.factories.impl.SimpleIntersectionFactory
import java.util.UUID

/** 
 * The environment agent, in charge of initializing the road network, then updating the positions of the vehicles on the road network
 * @author Alexandre Lombard
 * 
 */
agent EnvironmentAgent {
	uses Logging, Schedules
	
	/** The road network of the environment */
	val roadNetwork = new RoadNetwork()
	
	/** The vehicles currently in the environment */
	val vehicles = <UUID, Vehicle>newHashMap
	
	def buildRoadNetwork() {
		// Note: change the implementation of the factory to generate another road network
		val roadNetworkFactory = new SimpleIntersectionFactory()
		
		// Generate the road network
		roadNetworkFactory.generateRoadNetwork(this.roadNetwork)
	}

	on Initialize {
		info("Building road network...")
		
		buildRoadNetwork()
		
		info("Scheduling vehicle spawn...")
		
		every(1000.milliseconds)[
			
		]
	}
}
